# Generated by Django 4.0.7 on 2023-07-16 02:35
import json
from django.db import migrations

network_id = 2
network_name = "Ethereum Mainnet"

contract_data_list = [
    dict(
        contract_name="Pool",
        contract_address="0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2",
        abi="""[{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_logic","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"initialize","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}]"""
    ),
]


def add_new_network(apps, schema):
    Network = apps.get_model("tracker", "Network")
    Network.objects.update_or_create(
        id=network_id, defaults=dict(name=network_name)
    )


def remove_network(apps, schema):
    Network = apps.get_model("tracker", "Network")
    Network.objects.get(id=network_id).delete()


def add_new_contract(apps, schema):
    Contract = apps.get_model("tracker", "Contract")
    for contract in contract_data_list:
        contract_name = contract.get("contract_name")
        contract_address = contract.get("contract_address")
        abi = json.loads(contract.get("abi"))
        Contract.objects.update_or_create(
            name=contract_name, address=contract_address, network_id=network_id, abi=abi
        )


def remove_contract(apps, schema):
    Contract = apps.get_model("tracker", "Contract")
    for contract in contract_data_list:
        contract_name = contract.get("contract_name")
        contract_address = contract.get("contract_address")
        Contract.objects.get(name=contract_name, address=contract_address).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0003_auto_20230715_0207'),
    ]

    operations = [
        migrations.RunPython(add_new_network, remove_network, elidable=False),
        migrations.RunPython(add_new_contract, remove_contract, elidable=False),
    ]

